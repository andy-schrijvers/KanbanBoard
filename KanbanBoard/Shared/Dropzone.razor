
<div class="priority">
    <h2>@Priority.ToString()</h2>
    <div class="dropzone"
         @ondrop="OnDropHandler"
         ondragover="event.preventDefault()">
         
        @foreach (var item in TaskItemsDictionary.Where(x => x.Value.Priority == Priority).OrderByDescending(x => x.Key))
        {
            <div class="draggable"
                 draggable="true"
                 @ondragstart="@(() => OnStartDragHandler(item))"
                 @ondragenter="@(() => OnDragEnterHandler(item))"
                 @ondragend="OnDragEnd">
                @item.Value.TaskName
                <span class="badge badge-secondary">
                    @item.Value.Priority
                </span>
            </div>
        }
    </div>
</div>



@code {

    [Parameter]
    public Dictionary<string,TaskItem> TaskItemsDictionary { get; set; }

    [Parameter]
    public TaskPriority Priority { get; set; }

    [Parameter]
    public EventCallback<TaskPriority> OnDrop { get; set; }

    [Parameter]
    public EventCallback<KeyValuePair<string, TaskItem>> OnStartDrag { get; set; }

    [Parameter]
    public EventCallback<KeyValuePair<string, TaskItem>> OnDragEnter { get; set; }

    [Parameter]
    public EventCallback OnDragEnd { get; set; }

    public void OnDropHandler()
    {
        OnDrop.InvokeAsync(Priority);
    }

    public void OnStartDragHandler(KeyValuePair<string, TaskItem> kvp)
    {
        OnStartDrag.InvokeAsync(kvp);
    }

    public void OnDragEnterHandler(KeyValuePair<string, TaskItem> kvp)
    {
        if (kvp.Value != null)
        {
            OnDragEnter.InvokeAsync(kvp);
        }

    }

    public void OnDragEndHandler()
    {
        OnDragEnd.InvokeAsync();
    }
}
